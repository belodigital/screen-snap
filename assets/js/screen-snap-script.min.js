const puppeteer=require("puppeteer"),path=require("path"),fs=require("fs"),defaultScreenshotWidth=1920,defaultScreenshotHeight=1080,defaultPageNavigationTimeout=3e4,args=getArguments(),loginCredentials={url:args.loginUrl,username:args.loginUsername,password:args.loginPassword},loginFormFieldsSelectors={email:args.loginUsernameFieldSelector,password:args.loginPasswordFieldSelector,submitButton:args.loginSubmitButtonSelector},pageNavigationTimeout=args.pageNavigationTimeout||3e4;var screenshotWidth=args.screenshotWidth||1920,screenshotHeight=args.screenshotHeight||1080;const savePath=args.savePath,url=args.url,fileName=args.fileName;var stepsToReproduce=null;args.stepsToReproduce&&(stepsToReproduce=parseJson(args.stepsToReproduce));var data=null;args.data&&(data=parseJson(args.data));var performLogin=!1,isFirstIteration=!0;function getArguments(){let e=process.argv.slice(2),t={};return e.forEach(e=>{let r=e.indexOf("=");if(r>-1){let a=e.slice(0,r).replace("--",""),s=e.slice(r+1);t[a]=s}}),t}function verifyParameters(){savePath||(console.error("Missing parameter: --savePath."),process.exit(1)),screenshotWidth=parseInt(screenshotWidth),screenshotHeight=parseInt(screenshotHeight),(isNaN(screenshotWidth)||isNaN(screenshotHeight))&&(console.error("Invalid screenshot dimensions."),process.exit(1)),loginCredentials.url&&loginCredentials.username&&loginCredentials.password&&loginFormFieldsSelectors.email&&loginFormFieldsSelectors.password&&loginFormFieldsSelectors.submitButton&&(performLogin=!0)}function parseJson(e){try{return JSON.parse(e)}catch(t){console.error("Error parsing JSON:",t.message),process.exit(1)}}async function login(e){try{await e.type(loginFormFieldsSelectors.email,loginCredentials.username),await e.type(loginFormFieldsSelectors.password,loginCredentials.password),await Promise.all([e.click(loginFormFieldsSelectors.submitButton),e.waitForNavigation({waitUntil:"networkidle2"}),])}catch(t){throw"Error logging in: "+t.message}}async function isLoginRequired(e){try{return await e.$(loginFormFieldsSelectors.email)!==null}catch(t){throw"Error checking login page: "+t.message}}async function reproduceSteps(e,t){try{for(let r of t){let a=await e.waitForSelector(r.selector);switch(r.action){case"click":await a.click();break;case"fillField":await a.type(r.value);break;default:throw r.type}}}catch(s){throw s}}async function takeScreenshot(e,t,r,a){try{await e.goto(t,{waitUntil:"networkidle2",timeout:pageNavigationTimeout}),performLogin&&await isLoginRequired(e)&&await login(e),r&&await reproduceSteps(e,r);await e.screenshot({path:path.join(savePath,getUniqueFileName(savePath,a)),fullPage:!0})}catch(s){throw"Error taking screenshot '"+a+"': "+s.message}}async function handleSingleScreenshot(){let e;try{e=await puppeteer.launch({headless:"new"});let t=await e.newPage();await t.setViewport({width:screenshotWidth,height:screenshotHeight}),await takeScreenshot(t,url,stepsToReproduce,fileName),console.log("Screenshot process completed successfully.")}catch(r){console.error("Screenshot process failed:",r),process.exit(1)}finally{e&&await e.close()}}async function handleBatchScreenshots(){let e,t=0,r=0,a=0;try{e=await puppeteer.launch({headless:"new"});let s=await e.newPage();for(let i of(await s.setViewport({width:screenshotWidth,height:screenshotHeight}),data)){t++;try{await takeScreenshot(s,i.url,i.stepsToReproduce,i.fileName),r++}catch(o){a++,console.error("Error processing URL '"+i.url+"':",o,"\n")}progressBar(t,data.length)}}catch(n){console.log("Batch process failed:",n.message)}finally{e&&await e.close(),progressBar(t,data.length),console.log("Total URLs processed:",t,"\nSuccess:",r,"\nErrors:",a)}}function progressBar(e,t){let r=Math.round(e/t*100),a=Math.round(r/100*15),s="█".repeat(a)+"░".repeat(15-a),i=`Snapping screens: ${s} ${r}%
`;process.stderr.isTTY?(isFirstIteration?isFirstIteration=!1:process.stderr.moveCursor(0,-1),process.stderr.clearLine(),process.stderr.cursorTo(0),process.stderr.write(i)):console.error(i)}function getDefaultFileName(){return"screenshot_"+getFormatedDateTimeForDefaultFileName()+".png"}function getFormatedDateTimeForDefaultFileName(){var e=new Date;return e.getFullYear()+"-"+(e.getMonth()+1)+"-"+e.getDate()+"_"+e.getHours()+"-"+e.getMinutes()+"-"+e.getSeconds()}function getUniqueFileName(e,t){t||(t=getDefaultFileName());let r=path.dirname(t),a=path.basename(t,path.extname(t)),s=path.extname(t),i=t,o=1;for(;fs.existsSync(path.join(e,r,i));)i=`${a}_${o}${s}`,o++;return path.join(r,i)}async function main(){verifyParameters(),data?await handleBatchScreenshots():url?await handleSingleScreenshot():(console.error("Error: Provide --url or --data (array of URLs in JSON format)."),process.exit(1)),process.exit(0)}main();